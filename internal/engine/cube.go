package engine

type Cube struct {
	BaseMesh
}

func NewCube(opts ...MeshOption) *Cube {
	c := &Cube{BaseMesh: NewBaseMesh()}

	
vertices := []float32{
    // Positions          // Normals
    // Back face
    -0.5, -0.5, -0.5,     0.0,  0.0, -1.0,
     0.5, -0.5, -0.5,     0.0,  0.0, -1.0,
     0.5,  0.5, -0.5,     0.0,  0.0, -1.0,
     0.5,  0.5, -0.5,     0.0,  0.0, -1.0,
    -0.5,  0.5, -0.5,     0.0,  0.0, -1.0,
    -0.5, -0.5, -0.5,     0.0,  0.0, -1.0,

    // Front face
    -0.5, -0.5,  0.5,     0.0,  0.0,  1.0,
     0.5, -0.5,  0.5,     0.0,  0.0,  1.0,
     0.5,  0.5,  0.5,     0.0,  0.0,  1.0,
     0.5,  0.5,  0.5,     0.0,  0.0,  1.0,
    -0.5,  0.5,  0.5,     0.0,  0.0,  1.0,
    -0.5, -0.5,  0.5,     0.0,  0.0,  1.0,

    // Left face
    -0.5,  0.5,  0.5,    -1.0,  0.0,  0.0,
    -0.5,  0.5, -0.5,    -1.0,  0.0,  0.0,
    -0.5, -0.5, -0.5,    -1.0,  0.0,  0.0,
    -0.5, -0.5, -0.5,    -1.0,  0.0,  0.0,
    -0.5, -0.5,  0.5,    -1.0,  0.0,  0.0,
    -0.5,  0.5,  0.5,    -1.0,  0.0,  0.0,

    // Right face
     0.5,  0.5,  0.5,     1.0,  0.0,  0.0,
     0.5,  0.5, -0.5,     1.0,  0.0,  0.0,
     0.5, -0.5, -0.5,     1.0,  0.0,  0.0,
     0.5, -0.5, -0.5,     1.0,  0.0,  0.0,
     0.5, -0.5,  0.5,     1.0,  0.0,  0.0,
     0.5,  0.5,  0.5,     1.0,  0.0,  0.0,

    // Bottom face
    -0.5, -0.5, -0.5,     0.0, -1.0,  0.0,
     0.5, -0.5, -0.5,     0.0, -1.0,  0.0,
     0.5, -0.5,  0.5,     0.0, -1.0,  0.0,
     0.5, -0.5,  0.5,     0.0, -1.0,  0.0,
    -0.5, -0.5,  0.5,     0.0, -1.0,  0.0,
    -0.5, -0.5, -0.5,     0.0, -1.0,  0.0,

    // Top face
    -0.5,  0.5, -0.5,     0.0,  1.0,  0.0,
     0.5,  0.5, -0.5,     0.0,  1.0,  0.0,
     0.5,  0.5,  0.5,     0.0,  1.0,  0.0,
     0.5,  0.5,  0.5,     0.0,  1.0,  0.0,
    -0.5,  0.5,  0.5,     0.0,  1.0,  0.0,
    -0.5,  0.5, -0.5,     0.0,  1.0,  0.0,
}


	indices := []uint32{
    0, 1, 2,    3, 4, 5,
    6, 7, 8,    9, 10, 11,
    12, 13, 14, 15, 16, 17,
    18, 19, 20, 21, 22, 23,
    24, 25, 26, 27, 28, 29,
    30, 31, 32, 33, 34, 35,
	}

	c.SetVertexData(vertices, indices)

	for _, opt := range opts {
		opt(&c.BaseMesh)
	}

	return c
}

